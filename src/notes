| | | | | | |ANGULAR

Basic building blocks

1)Module - To import 3rd party Modules(root module -app.module.ts)
2)component - To create html,css and ts files

Basic Commands

1)To create new project - ng new project_name
2)To create new component - ng g c component_name
3)To run angular files - ng serve --open

Basic concept

data binding
share data between components

ts->component
html->view

1)one way data binding
data sharing only one direction
    1.1)component to view(ts->html)

          a)string interpolation - {{expression}}
          b)property binding - [attribute_name]="property


    1.2)view to components(html to ts)

           a)Event binding  - (event_name)="function_name()"  
           b)Event binding using $event-(event)="function_name($event)"  
           c)Event binding using  template referenceing variable - #variable_name 
2)Two way data binding
Data  sharing in both direction(ts->html html->ts)

      i)ngModel binding - import formsModule in app.module.ts
     
      [(ngModel)]="property_name"


Angular Routing

To set path for component

{
      path:value,component:component_name
},
login
{
      path:'',component:LoginComponent
},



3)Angular services

To hold redundant data 

To create new service - ng g s service_name

4)Dependency injection

To share data between dependand classes

constructor(private ds:Dataservice)
 

5) angular directives to manipulate DOM

a)COMPONENT DIRECTIVS(ARRAY)
b)STRUCTURAL DIARECTIVES(TABLES)
   ->*ngFor

6)Angular forms

a)Template driven forms(first design the html page)
b)Model driven forms(first design model in ts file)
      1)Reactive forms
      fromGroup,array,control
      for advanced validation
      import from reactive forms modules(in app.module.ts)

7)Local storage
       -setItem - To store data in local storage
       -getItem - To get data from local storage
       -removeItem - To remove data from local storage

8) Parent child communication
      parent -> child communication
      child ->parent communication

      eg:
      dashboard -> parent -@Input
      delete -> child -@output       